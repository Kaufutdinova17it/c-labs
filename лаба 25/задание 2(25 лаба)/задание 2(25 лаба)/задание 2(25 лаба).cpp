/*Унарные операции:
++ увеличивает стороны треугольника в 2 раза (чтобы вновь
получить катеты прямоугольного треугольника);
-- уменьшает стороны треугольника в 2 раза (чтобы вновь
получить катеты прямоугольного треугольника);
Операции приведения типа:
double (явная) – результатом является площадь треугольника,
если треугольник существует и отрицательное число в
противном случае;
bool (неявная) – результатом является true, если треугольник с
такими длинами сторон существует и false в противном случае.
Бинарные операции:
<= RightTriangle t – сравнивает площади треугольников;
>= RightTriangle t – сравнивает площади треугольников.*/
#include <iostream>
#include "Header.h"

using namespace std;

int main()
{
    setlocale(LC_ALL, "rus");
    try
    {
        double a, b,c;

        cout << "Введите длину первой стороны (a): ";
        cin >> a;
        cout << "Введите длину второй стороны (b): ";
        cin >> b;
        cout << "Введите длину третьей стороны (c):";
        cin >> c;

        RightTriangle triangle(a, b,c);
        cout << triangle << endl;

        // Тестирование унарных операций
        ++triangle; // Увеличиваем катеты в 2 раза
        cout << "После увеличения: " << triangle << endl;

        --triangle; // Уменьшаем катеты в 2 раза
        cout << "После уменьшения: " << triangle << endl;

        // Проверка существования треугольника
        bool exists = static_cast<bool>(triangle);
        cout << "Треугольник существует: " << (exists ? "Да" : "Нет") << endl;

        // Создание другого треугольника для тестирования бинарных операций
        RightTriangle anotherTriangle(5.0, 10.0,6.0);
        cout << "Другой треугольник: " << anotherTriangle << endl;

        // Тестирование бинарных операций
        cout << "Площадь первого треугольника <= Площадь второго треугольника: "
            << (triangle <= anotherTriangle ? "Да" : "Нет") << endl;

        cout << "Площадь первого треугольника >= Площадь второго треугольника: "
            << (triangle >= anotherTriangle ? "Да" : "Нет") << endl;

    }
    catch (const invalid_argument& e)
    {
        cout << "Ошибка: " << e.what() << endl;
    }
    catch (const exception& e)
    {
        cout << "Произошла ошибка: " << e.what() << endl;
    }

    return 0;
}


